# Licensed to the Apache Software Foundation (ASF) under one or more contributor
# license agreements; and to You under the Apache License, Version 2.0.

# common logging configuration see common scala
include "logging"
include "akka-http-version"

whisk {
  blacklist {
    poll-interval: 5 minutes
  }

  # Timeouts for docker commands. Set to "Inf" to disable timeout.
  docker.client {
    parallel-runs: 10

    timeouts {
      run: 1 minute
      rm: 1 minute
      pull: 10 minutes
      ps: 1 minute
      inspect: 1 minute
      pause: 10 seconds
      unpause: 10 seconds
    }
  }

  docker.container-factory {
    # Use runc (docker-runc) for pause/resume functionality in DockerContainerFactory
    use-runc: true
  }

  container-pool-client {
    # if true, use PoolingContainerClient for HTTP from invoker to action container (otherwise use ApacheBlockingContainerClient)
    akka-client: false
  }

  container-pool {
    # For kubernetes, these config may not be suitable.
    pools: [
      {
        num-core: 2
        core-share: 1
        # Daemon is optional, pick up unix sock if not existed. Since Docker for Mac doesn't support remote API.
        # daemon: {
        # host: 127.0.0.1
        # port: 2376
        # }
      },
      {
        num-core: 2
        core-share: 1
      }
    ]
  }

  # Timeouts for runc commands. Set to "Inf" to disable timeout.
  runc.timeouts {
    pause: 10 seconds
    resume: 10 seconds
  }

  # args for 'docker run' to use
  container-factory.container-args {
    network: bridge
    dns-servers: []
    extra-args: {}   # to pass additional args to 'docker run'; format is `{key1: [v1, v2], key2: [v1, v2]}`
  }

  container-proxy {
    timeouts {
      # The "unusedTimeout" in the ContainerProxy,
      #aka 'How long should a container sit idle until we kill it?'
      idle-container = 10 minutes
      pause-grace = 50 milliseconds
    }
  }

  # tracing configuration
  tracing {
    component = "Scheduler"
  }

}

akka {
  actor {
    provider = "cluster"
  }

  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      port = 2552
    }
  }

  cluster {
    seed-nodes = [
      "akka.tcp://whisk-actor-system@127.0.0.1:2552"
    ]
    roles = ["scheduler"]

    singleton {
      # The actor name of the child singleton actor
      singleton-name = "scheduler"
      role = "scheduler"
    }
  }
}
